[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lorenzo Mattioli",
    "section": "",
    "text": "I am a Master student in Politics and Social Policy at the University of Bologna. My main research interests revolve around social stratification and economic inequality. On this website, you will find a selection of my data analysis projects (both the serious and the unserious) as well as some data literacy teaching material. Check out the about section to get to know me better."
  },
  {
    "objectID": "posts/RxR Report inequality and poverty/index.html",
    "href": "posts/RxR Report inequality and poverty/index.html",
    "title": "Inequality and poverty report",
    "section": "",
    "text": "Show code\npackages &lt;- c('ggbump','tidyverse','laeken','MetBrewer','sf','ggiraph')\ninstall.packages(setdiff(packages, rownames(installed.packages()))) \nrm(packages)\nlibrary(ggbump)\nlibrary(tidyverse)\nlibrary(laeken)\nlibrary(MetBrewer)\nlibrary(sf)\nlibrary(ggiraph)\n# import pdata\npdata &lt;- readRDS('SHIWpdata.rds')\n# Inequality indexes -----------------------------------------------------------\n## Gini - Income ----\n### Over regions by year\nas_tibble(gini(pdata$eqhincome,\n     weights = pdata$peso,\n     years = pdata$anno,\n     breakdown = pdata$ireg,\n     na.rm = T\n)[['valueByStratum']]) -&gt; giniInc\n\nginiInc$stratum &lt;- gsub(' - ', '-', giniInc$stratum)\n### ranking\nginiInc |&gt; \n  group_by(year) |&gt; \n  mutate(\n    rank = rank(value)\n  ) -&gt; giniInc\n### rounding off value\nginiInc$value &lt;- round(giniInc$value, 2)\n\n### ranking5\nginiInc$rank5 &lt;- case_match(giniInc$rank,\n                            1:4 ~ 1,\n                            5:8 ~ 2,\n                            9:12 ~ 3,\n                            13:16 ~ 4,\n                            17:20 ~ 5\n                            )\n### Total by year\nas_tibble_col(gini(pdata$eqhincome,\n     weights = pdata$peso,\n     years = pdata$anno,\n     na.rm = T\n)[[\"value\"]]) -&gt; giniIncTot\n\nginiIncTot$stratum &lt;- 'Italia'\nginiIncTot$year &lt;- c(2000, 2002, 2004, 2008, 2010, 2012, 2014, 2016, 2020)\nginiIncTot$rank &lt;- NA\n\nginiInc &lt;- rbind(giniInc, giniIncTot)\nrm(giniIncTot)\n\n\n## Gini - wealth ----\n### Over regions by year\nas_tibble(gini(pdata$pcwealth,\n               weights = pdata$peso,\n               years = pdata$anno,\n               breakdown = pdata$ireg,\n               na.rm = T\n)[['valueByStratum']]) -&gt; giniW\n\nginiW$stratum &lt;- gsub(' - ', '-', giniW$stratum)\n\n### ranking\nginiW |&gt; \n  group_by(year) |&gt; \n  mutate(\n    rank = rank(value)\n  ) -&gt; giniW\n### ranking5\nginiW$rank5 &lt;- case_match(giniW$rank,\n                            1:4 ~ 1,\n                            5:8 ~ 2,\n                            9:12 ~ 3,\n                            13:16 ~ 4,\n                            17:20 ~ 5\n)\n\n### rounding off value\nginiW$value &lt;- round(giniW$value, 2)\n\n### Total by year\nas_tibble_col(gini(pdata$pcwealth,\n                   weights = pdata$peso,\n                   years = pdata$anno,\n                   na.rm = T\n)[[\"value\"]]) -&gt; giniWTot\n\nginiWTot$stratum &lt;- 'Italia'\nginiWTot$year &lt;- c(2000, 2002, 2004, 2008, 2010, 2012, 2014, 2016, 2020)\nginiWTot$rank &lt;- NA\n\nginiW &lt;- rbind(giniW, giniWTot)\nrm(giniWTot)\n\n\n\n# Poverty  ---------------------------------------------------------------------\n\n## Head count ----\n### Over region by year\npdata |&gt; \n  group_by(anno, ireg) |&gt; \n  count(pov) -&gt; pov\npdata |&gt; \n  group_by(anno, ireg) |&gt; \n  count(!pov) -&gt; pov$'!pov'\npov |&gt; \n  mutate('!pov' = `!pov`$n) |&gt; \n  filter(pov == 1) |&gt; \n  mutate(pov = n) |&gt; \n  select(!n) -&gt; pov\n\npov |&gt; \n  mutate(hCount = pov/(sum(pov, `!pov`))) -&gt; pov\n\n### Ranking\npov |&gt; \n  group_by(anno) |&gt; \n  mutate(\n    rankHCount = 21-rank(hCount)\n  ) -&gt; pov\n\n## Poverty intensity ----\n### povLine\npdata |&gt; \n  group_by(anno) |&gt; \n  summarise(povLine = weightedMedian(eqhincome,\n                                     weights = peso)*0.6) -&gt; povLine\npov &lt;- left_join(pov, povLine)\nrm(povLine)\n\n### Poverty gap\navPoor &lt;- pdata |&gt;\n  filter(pov == 1) |&gt; \n  group_by(anno, ireg) |&gt;\n  summarise(avPoor = weightedMean(eqhincome, weights = peso))\npov &lt;- left_join(pov, avPoor)\nrm(avPoor)\npov$povGapIndex &lt;- pov$hCount * (pov$povLine - pov$avPoor)/pov$povLine\n\n### Ranking\npov |&gt; \n  group_by(anno) |&gt; \n  mutate(\n    rankPovGap = 21-rank(povGapIndex)\n  ) -&gt; pov\n\n## LPM risk of being in poverty ----\npdata &lt;- within(pdata, cfedu &lt;- relevel(factor(cfedu), ref = 'Specializzazione post-laurea'))\npdata &lt;- within(pdata, cfsex &lt;- relevel(factor(cfsex), ref = 'Maschile'))\npdataReg &lt;- pdata |&gt; \n  filter(anno == 2020)\n\n### Regression models\nlpm0 &lt;- lm(pov ~ factor(cfedu),\n   weights = pesopop,\n   data = pdataReg)\nlpm1 &lt;- lm(pov ~ factor(cfedu) + factor(cfsex) + factor(cfclass),\n           weights = pesopop,\n           data = pdataReg)\n\n### Harvesting results\nlpm0results &lt;- as_tibble(summary(lpm0)[[\"coefficients\"]])\nlpm0results &lt;- cbind(lpm0results, confint(lpm0, level=0.95)) #adding CIs\n\nlpm1results &lt;- as_tibble(summary(lpm1)[[\"coefficients\"]])\nlpm1results &lt;- cbind(lpm1results, confint(lpm1, level=0.95)) #adding CIs\nlpm0results &lt;- lpm0results %&gt;% setNames(paste0('0.', names(.)))\n\n### Cleaning results\nlpm0results &lt;- lpm0results |&gt; \n  rownames_to_column(var = 'reg')\nlpm1results &lt;- lpm1results |&gt; \n  rownames_to_column(var = 'reg')\n\nlpmresults &lt;- full_join(lpm0results, lpm1results)\nrm(lpm0results, lpm1results, lpm0, lpm1)\n\nlpmresults['reg'][lpmresults['reg'] == '(Intercept)'] &lt;- ')Intercept'\n\nlpmresults &lt;- lpmresults |&gt; \n  mutate(reg = str_split_fixed(reg, fixed(')'), n = Inf)) \n\nlpmresults &lt;- within(lpmresults, reg &lt;- reg[,2])\n\nlpmresults$'0.star' &lt;- ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.001, '***',\n                            ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.01, '**',\n                                   ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.05, '*',\n                                          ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.1, '.', ''))))\n\nlpmresults$star&lt;- ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.001, '***',\n                              ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.01, '**',\n                                     ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.05, '*',\n                                            ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.1, '.', ''))))\n\nlpmresults &lt;- lpmresults |&gt; \n  relocate('0.star', .before = Estimate)\n\nlpmresults$vars &lt;- c('Intercetta', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Sesso', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale')\n\n\nRxR - una Regione per Restare commissioned a research project on economic inequality in Italy, with a specific focus Umbria, its main region of interest. The complete report is available at forthcoming (in Italian), while the source code is available on github.\nBelow is a selection of the data visualization work involved (translated to English). The project was conducted using R, interactive plots and maps are realised using the ggiraph package."
  },
  {
    "objectID": "posts/RxR Report inequality and poverty/index.html#mapping-inequality-and-poverty",
    "href": "posts/RxR Report inequality and poverty/index.html#mapping-inequality-and-poverty",
    "title": "Inequality and poverty report",
    "section": "Mapping inequality and poverty",
    "text": "Mapping inequality and poverty\n\n\nShow code\n##### import sf\nregMap &lt;- readRDS('regMap.rds')\n\n##### merge Gini tibbles with sf data\nincMap &lt;- left_join(giniInc, regMap, by = join_by(stratum == DEN_REG))\n\n##### ggiraph ready map\nincGiniGG &lt;- incMap |&gt; \n  filter(year == 2000 | year == 2010 |year == 2020) |&gt; \n  drop_na(rank) |&gt; \n  ggplot() +\n  geom_sf_interactive(aes(geometry = geometry, fill = value, data_id = stratum, tooltip = value), colour = 'black') +\n  facet_wrap(vars(year)) +\n  labs(x = NULL, y = NULL,\n       title = 'Gini index by region',\n       subtitle = 'Equivalent household income',\n       caption = 'Data: Bank of Italy. Elaborated by Lorenzo Mattioli - Una Regione per Restare') +\n  theme_minimal(base_family = 'Helvetica') +\n  scale_fill_viridis_c(direction = -1, limits = c(15, 40), option = 'mako') +\n  theme(axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        panel.grid = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_text(size = 20,\n                                  hjust = .5),\n        plot.subtitle = element_text(size = 15,\n                                     hjust = .5),\n        plot.caption = element_text(size = 10,\n                                    hjust = .5))\n\n\n##### interactive map\ngirafe(ggobj = incGiniGG,\n       width_svg = 13,\n       options = list(\n         opts_hover(css = ''), ## CSS code of line we're hovering over\n         opts_hover_inv(css = \"opacity:0.3;\"), ## CSS code of all other lines\n         opts_tooltip(css = \"background-color:white;\n                      color:black;\n                      font-family:Helvetica;\n                      font-style:empty;\n                      padding:8px;\n                      border-radius:10px;\",\n                      use_cursor_pos = T),\n         opts_toolbar(position = 'bottomright')\n       ))\n\n\n\n\n\n\n\n\nShow code\npov$ireg &lt;- gsub(' - ', '-', pov$ireg)\npovMap &lt;- left_join(pov, regMap, by = join_by(ireg == DEN_REG))\n##### ggiraph ready map\npovMap$hCount &lt;- round(povMap$hCount*100, 2)\n\npovhGG &lt;- povMap |&gt; \n  filter(anno == 2000 | anno == 2010 |anno == 2020) |&gt;\n  ggplot() +\n  geom_sf_interactive(aes(geometry = geometry, fill = hCount, data_id = ireg, tooltip = hCount), colour = 'black') +\n  facet_wrap(vars(anno)) +\n  labs(x = NULL, y = NULL,\n       title = 'Poverty headcount by region',\n       caption = 'Data: Bank of Italy. Elaborated by Lorenzo Mattioli - Una Regione per Restare') +\n  theme_minimal(base_family = 'Helvetica') +\n  scale_fill_viridis_c(direction = -1, limits = c(0, 51), option = 'inferno') +\n  theme(axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        panel.grid = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_text(size = 20,\n                                  hjust = .5),\n        plot.subtitle = element_text(size = 15,\n                                     hjust = .5),\n        plot.caption = element_text(size = 10,\n                                    hjust = .5))\n\n\n##### interactive map\ngirafe(ggobj = povhGG,\n       width_svg = 13,\n       options = list(\n         opts_hover(css = ''), ## CSS code of line we're hovering over\n         opts_hover_inv(css = \"opacity:0.3;\"), ## CSS code of all other lines\n         opts_tooltip(css = \"background-color:white;\n                      color:black;\n                      font-family:Helvetica;\n                      font-style:empty;\n                      padding:8px;\n                      border-radius:10px;\",\n                      use_cursor_pos = T),\n         opts_toolbar(position = 'bottomright')\n       ))"
  },
  {
    "objectID": "posts/RxR Report inequality and poverty/index.html#ranking-regions-by-inequality-indexes-and-poverty",
    "href": "posts/RxR Report inequality and poverty/index.html#ranking-regions-by-inequality-indexes-and-poverty",
    "title": "Inequality and poverty report",
    "section": "Ranking regions by inequality indexes and poverty",
    "text": "Ranking regions by inequality indexes and poverty\n\nShow code\n# Gini\nginiInc |&gt; \n  filter(year == 2000 | year == 2004 | year == 2008 | year == 2012 | year == 2016 | year == 2020) |&gt; \n  drop_na(rank) |&gt; \n  ggplot(aes(x = year, y = rank, data_id = stratum)) +\n  geom_bump(linewidth = 0.6, color = 'gray90',\n            data = ~. |&gt; filter(stratum != 'Umbria')) +\n  geom_bump(aes(colour = stratum), linewidth = 0.8,\n            data = ~. |&gt; filter(stratum == 'Umbria' | stratum == 'Lombardia' | stratum == 'Abruzzo')) +\n  geom_point(color = 'gray90',\n             data = ~. |&gt; filter(stratum != 'Umbria'),\n             size = 4) +\n  geom_point(aes(colour = stratum),\n             data = ~. |&gt; filter(stratum == 'Umbria' | stratum == 'Lombardia' | stratum == 'Abruzzo'),\n             size = 4) +\n  geom_point(color = 'white', size = 2) +\n  geom_text_interactive(aes(label = stratum, group = stratum), colour = 'gray90', x = 2021, hjust = 0, size = 3.5, family = 'Helvetica',\n                        data = ~. |&gt; filter(year == 2020)) +\n  geom_text(aes(label = stratum, group = stratum), colour = 'black', x = 2021, hjust = 0,, size = 3.5, family = 'Helvetica',\n            data = ~. |&gt; filter(year == 2020 & stratum == 'Umbria' | year == 2020 & stratum == 'Lombardia' | year == 2020 & stratum == 'Abruzzo')) +\n  scale_color_viridis_d(option = 'mako', end = .6) +\n  scale_x_continuous(limits = c(2000, 2024) ,expand = c(0.01, 0), breaks=c(2000, 2004, 2008, 2012, 2016, 2020)) +\n  scale_y_reverse(expand = c(0.02, 0), breaks = c(5, 10, 15, 20)) +\n  labs(x = NULL, y = NULL,\n       title = 'Ranking Italian regions by Gini index',\n       subtitle = 'Equivalent household income',\n       caption = 'Data: Bank of Italy. Elaborated by Lorenzo Mattioli - Una Regione per Restare') +\n  theme_minimal(base_family = 'Helvetica') +\n  theme(\n    legend.position = 'none',\n    panel.grid = element_blank(),\n    plot.title = element_text(size = 20,\n                              hjust = .5),\n    plot.subtitle = element_text(size = 15,\n                                 hjust = .5),\n    plot.caption = element_text(size = 10,\n                                hjust = .5)\n  )\n# Poverty\npov |&gt; \n  filter(anno == 2000 | anno == 2004 | anno == 2008 | anno == 2012 | anno == 2016 | anno == 2020) |&gt; \n  ggplot(aes(x = anno, y = rankHCount, group = ireg, data_id = ireg)) +\n    geom_bump(linewidth = 0.6, color = \"gray90\", smooth = 6) +\n    geom_bump(aes(colour = ireg), linewidth = 0.8, smooth = 6,\n                data = ~. |&gt; filter(ireg == 'Umbria' | ireg == 'Lombardia' | ireg == 'Abruzzo')) +\n    geom_point(color = \"gray90\", size = 4) +\n    geom_point(aes(colour = ireg),\n               data = ~. |&gt; filter(ireg == 'Umbria' | ireg == 'Lombardia' | ireg == 'Abruzzo'),\n               size = 4) +\n    geom_point(color = 'white', size = 2) +\n    geom_text(aes(label = ireg, group = ireg), colour = 'gray90', x = 2021, hjust = 0, size = 3.5, family = 'Helvetica',\n              data = ~. |&gt; filter(anno == 2020)) +\n    geom_text(aes(label = ireg, group = ireg), colour = 'black', x = 2021, hjust = 0,, size = 3.5, family = 'Helvetica',\n              data = ~. |&gt; filter(anno == 2020 & ireg == 'Umbria' | anno == 2020 & ireg == 'Lombardia' | anno == 2020 & ireg == 'Abruzzo')) +\n    scale_color_manual(values = met.brewer('Degas')) +\n    scale_x_continuous(limits = c(2000, 2024) ,expand = c(0.01, 0), breaks=c(2000, 2010, 2020)) +\n    scale_y_reverse(expand = c(0.02, 0), breaks = c(1, 5, 10, 15, 20)) +\n    labs(x = NULL, y = NULL,\n         title = 'Ranking Italian regions by poverty rate',\n         subtitle = 'Headcount, from poorest to least poor',\n         caption = 'Data: Bank of Italy. Elaborated by Lorenzo Mattioli - Una Regione per Restare') +\n    theme_minimal(base_family = 'Helvetica') +\n    theme(\n      legend.position = 'none',\n      panel.grid = element_blank(),\n      plot.title = element_text(size = 20,\n                           hjust = .5),\n      plot.subtitle = element_text(size = 15,\n                                   hjust = .5),\n      plot.caption = element_text(size = 10,\n                                  hjust = .5)\n    )"
  },
  {
    "objectID": "posts/RxR Report inequality and poverty/index.html#investigating-causes-of-poverty-through-lpm-modeling",
    "href": "posts/RxR Report inequality and poverty/index.html#investigating-causes-of-poverty-through-lpm-modeling",
    "title": "Inequality and poverty report",
    "section": "Investigating causes of poverty through LPM modeling",
    "text": "Investigating causes of poverty through LPM modeling\n\n\nShow code\nlpmresults$vars &lt;- factor(lpmresults$vars, levels=unique(lpmresults$vars))\nlpmresults$roundEst &lt;- round(lpmresults$Estimate, 2)\n\ngglpm &lt;- lpmresults |&gt; \n  filter(vars == 'Titolo di studio') |&gt; \n  mutate(reg = factor(reg, levels = c('Laurea', 'Medie superiori', 'Medie inferiori', 'Licenza elementare', 'Nessuno'))) |&gt; \n  ggplot(aes(x=Estimate, y=reg, colour = vars, data_id = roundEst, tooltip = roundEst)) +\n  geom_vline(xintercept = 0,\n             linewidth = 0.4,\n             color = 'gray70') +\n  geom_linerange_interactive(aes(xmin=`2.5 %`,xmax=`97.5 %`), linewidth = .6) +\n  geom_point_interactive(size = 6) +\n  geom_point(colour = 'white', size = 3) +\n  geom_point_interactive(aes(x = `2.5 %`), shape = '|', size = 6) +\n  geom_point_interactive(aes(x = `97.5 %`), shape = '|', size = 6) +\n  labs(x = NULL, y = NULL,\n       title = 'Probability of relative poverty based on head of household\\'s educational attainment',\n       subtitle = 'Reference category: post-lauream specialisation',\n       caption = 'Data: Bank of Italy. Elaborated by Lorenzo Mattioli - Una Regione per Restare') +\n  scale_color_manual(values = met.brewer('Degas')) +\n  theme_minimal(base_family = 'Helvetica') +\n  theme(panel.grid = element_line(),\n        legend.position = 'none',\n        axis.text = element_text(size = 13),\n        plot.title = element_text(size = 20,\n                                  hjust = 0),\n        plot.subtitle = element_text(size = 15,\n                                     hjust = 0),\n        plot.caption = element_text(size = 10,\n                                    hjust = .5))\n\ngirafe(ggobj = gglpm,\n       width_svg = 13,\n       options = list(\n         opts_hover(css = ''), ## CSS code of line we're hovering over\n         opts_hover_inv(css = \"opacity:0.3;\"), ## CSS code of all other lines\n         opts_tooltip(css = \"background-color:white;\n                      color:black;\n                      font-family:Helvetica;\n                      font-style:empty;\n                      padding:8px;\n                      border-radius:10px;\",\n                      use_cursor_pos = T),\n         opts_toolbar(position = 'bottomright')))"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Lorenzo Mattioli",
    "section": "",
    "text": "I have a background in Economics, and am now a Master student in Politics and Social Policy at the University of Bologna. In addition to my research activities at university, I am also involved with the association una Regione per Restare (RxR) as head of their Social Observatory.\nDue to my mixed background, I can count on solid foundations in data analysis and econometrics, as well as on extensive domain knowledge in social sciences.\nMy main research interests revolve around social stratification and material inequality, but the Projects section of this site will also accommodate some of my less “serious” work, as well as some teaching material.\n\nMy complete resume is available here:"
  },
  {
    "objectID": "posts/RxR Report inequality and poverty/index.html#introduction",
    "href": "posts/RxR Report inequality and poverty/index.html#introduction",
    "title": "Inequality and poverty report",
    "section": "",
    "text": "Show code\npackages &lt;- c('ggbump','tidyverse','laeken','MetBrewer','sf','ggiraph')\ninstall.packages(setdiff(packages, rownames(installed.packages()))) \nrm(packages)\nlibrary(ggbump)\nlibrary(tidyverse)\nlibrary(laeken)\nlibrary(MetBrewer)\nlibrary(sf)\nlibrary(ggiraph)\n# import pdata\npdata &lt;- readRDS('SHIWpdata.rds')\n# Inequality indexes -----------------------------------------------------------\n## Gini - Income ----\n### Over regions by year\nas_tibble(gini(pdata$eqhincome,\n     weights = pdata$peso,\n     years = pdata$anno,\n     breakdown = pdata$ireg,\n     na.rm = T\n)[['valueByStratum']]) -&gt; giniInc\n\nginiInc$stratum &lt;- gsub(' - ', '-', giniInc$stratum)\n### ranking\nginiInc |&gt; \n  group_by(year) |&gt; \n  mutate(\n    rank = rank(value)\n  ) -&gt; giniInc\n### rounding off value\nginiInc$value &lt;- round(giniInc$value, 2)\n\n### ranking5\nginiInc$rank5 &lt;- case_match(giniInc$rank,\n                            1:4 ~ 1,\n                            5:8 ~ 2,\n                            9:12 ~ 3,\n                            13:16 ~ 4,\n                            17:20 ~ 5\n                            )\n### Total by year\nas_tibble_col(gini(pdata$eqhincome,\n     weights = pdata$peso,\n     years = pdata$anno,\n     na.rm = T\n)[[\"value\"]]) -&gt; giniIncTot\n\nginiIncTot$stratum &lt;- 'Italia'\nginiIncTot$year &lt;- c(2000, 2002, 2004, 2008, 2010, 2012, 2014, 2016, 2020)\nginiIncTot$rank &lt;- NA\n\nginiInc &lt;- rbind(giniInc, giniIncTot)\nrm(giniIncTot)\n\n\n## Gini - wealth ----\n### Over regions by year\nas_tibble(gini(pdata$pcwealth,\n               weights = pdata$peso,\n               years = pdata$anno,\n               breakdown = pdata$ireg,\n               na.rm = T\n)[['valueByStratum']]) -&gt; giniW\n\nginiW$stratum &lt;- gsub(' - ', '-', giniW$stratum)\n\n### ranking\nginiW |&gt; \n  group_by(year) |&gt; \n  mutate(\n    rank = rank(value)\n  ) -&gt; giniW\n### ranking5\nginiW$rank5 &lt;- case_match(giniW$rank,\n                            1:4 ~ 1,\n                            5:8 ~ 2,\n                            9:12 ~ 3,\n                            13:16 ~ 4,\n                            17:20 ~ 5\n)\n\n### rounding off value\nginiW$value &lt;- round(giniW$value, 2)\n\n### Total by year\nas_tibble_col(gini(pdata$pcwealth,\n                   weights = pdata$peso,\n                   years = pdata$anno,\n                   na.rm = T\n)[[\"value\"]]) -&gt; giniWTot\n\nginiWTot$stratum &lt;- 'Italia'\nginiWTot$year &lt;- c(2000, 2002, 2004, 2008, 2010, 2012, 2014, 2016, 2020)\nginiWTot$rank &lt;- NA\n\nginiW &lt;- rbind(giniW, giniWTot)\nrm(giniWTot)\n\n\n\n# Poverty  ---------------------------------------------------------------------\n\n## Head count ----\n### Over region by year\npdata |&gt; \n  group_by(anno, ireg) |&gt; \n  count(pov) -&gt; pov\npdata |&gt; \n  group_by(anno, ireg) |&gt; \n  count(!pov) -&gt; pov$'!pov'\npov |&gt; \n  mutate('!pov' = `!pov`$n) |&gt; \n  filter(pov == 1) |&gt; \n  mutate(pov = n) |&gt; \n  select(!n) -&gt; pov\n\npov |&gt; \n  mutate(hCount = pov/(sum(pov, `!pov`))) -&gt; pov\n\n### Ranking\npov |&gt; \n  group_by(anno) |&gt; \n  mutate(\n    rankHCount = 21-rank(hCount)\n  ) -&gt; pov\n\n## Poverty intensity ----\n### povLine\npdata |&gt; \n  group_by(anno) |&gt; \n  summarise(povLine = weightedMedian(eqhincome,\n                                     weights = peso)*0.6) -&gt; povLine\npov &lt;- left_join(pov, povLine)\nrm(povLine)\n\n### Poverty gap\navPoor &lt;- pdata |&gt;\n  filter(pov == 1) |&gt; \n  group_by(anno, ireg) |&gt;\n  summarise(avPoor = weightedMean(eqhincome, weights = peso))\npov &lt;- left_join(pov, avPoor)\nrm(avPoor)\npov$povGapIndex &lt;- pov$hCount * (pov$povLine - pov$avPoor)/pov$povLine\n\n### Ranking\npov |&gt; \n  group_by(anno) |&gt; \n  mutate(\n    rankPovGap = 21-rank(povGapIndex)\n  ) -&gt; pov\n\n## LPM risk of being in poverty ----\npdata &lt;- within(pdata, cfedu &lt;- relevel(factor(cfedu), ref = 'Specializzazione post-laurea'))\npdata &lt;- within(pdata, cfsex &lt;- relevel(factor(cfsex), ref = 'Maschile'))\npdataReg &lt;- pdata |&gt; \n  filter(anno == 2020)\n\n### Regression models\nlpm0 &lt;- lm(pov ~ factor(cfedu),\n   weights = pesopop,\n   data = pdataReg)\nlpm1 &lt;- lm(pov ~ factor(cfedu) + factor(cfsex) + factor(cfclass),\n           weights = pesopop,\n           data = pdataReg)\n\n### Harvesting results\nlpm0results &lt;- as_tibble(summary(lpm0)[[\"coefficients\"]])\nlpm0results &lt;- cbind(lpm0results, confint(lpm0, level=0.95)) #adding CIs\n\nlpm1results &lt;- as_tibble(summary(lpm1)[[\"coefficients\"]])\nlpm1results &lt;- cbind(lpm1results, confint(lpm1, level=0.95)) #adding CIs\nlpm0results &lt;- lpm0results %&gt;% setNames(paste0('0.', names(.)))\n\n### Cleaning results\nlpm0results &lt;- lpm0results |&gt; \n  rownames_to_column(var = 'reg')\nlpm1results &lt;- lpm1results |&gt; \n  rownames_to_column(var = 'reg')\n\nlpmresults &lt;- full_join(lpm0results, lpm1results)\nrm(lpm0results, lpm1results, lpm0, lpm1)\n\nlpmresults['reg'][lpmresults['reg'] == '(Intercept)'] &lt;- ')Intercept'\n\nlpmresults &lt;- lpmresults |&gt; \n  mutate(reg = str_split_fixed(reg, fixed(')'), n = Inf)) \n\nlpmresults &lt;- within(lpmresults, reg &lt;- reg[,2])\n\nlpmresults$'0.star' &lt;- ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.001, '***',\n                            ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.01, '**',\n                                   ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.05, '*',\n                                          ifelse(lpmresults$`0.Pr(&gt;|t|)` &lt;= 0.1, '.', ''))))\n\nlpmresults$star&lt;- ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.001, '***',\n                              ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.01, '**',\n                                     ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.05, '*',\n                                            ifelse(lpmresults$`Pr(&gt;|t|)` &lt;= 0.1, '.', ''))))\n\nlpmresults &lt;- lpmresults |&gt; \n  relocate('0.star', .before = Estimate)\n\nlpmresults$vars &lt;- c('Intercetta', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Titolo di studio', 'Sesso', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale', 'Settore economico dell\\'occupazione principale')\n\n\nRxR - una Regione per Restare commissioned a research project on economic inequality in Italy, with a specific focus Umbria, its main region of interest. The complete report is available at forthcoming (in Italian), while the source code is available on github.\nBelow is a selection of the data visualization work involved (translated to English). The project was conducted using R, interactive plots and maps are realised using the ggiraph package."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Lorenzo Mattioli",
    "section": "",
    "text": "I am a Master student in Politics and Social Policy at the University of Bologna. My main research interests revolve around social stratification and economic inequality. On this website, you will find a selection of my data analysis projects (both the serious and the unserious) as well as some data literacy teaching material. Check out the about section to get to know me better.\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nInequality and poverty report\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Lorenzo Mattioli",
    "section": "Recent projects",
    "text": "Recent projects"
  },
  {
    "objectID": "posts/Formula 1/index.html",
    "href": "posts/Formula 1/index.html",
    "title": "Formula 1",
    "section": "",
    "text": "My whole family has been forever fascinated with car racing. This short exercise is therefore somewhat of a homage to the discipline.\nThe following charts were the excuse to try out the packages highcharter (for drilldown graphs) and gt (for tables). Both were heavily inspired by Tanya Shapiro’s work. The data used for this project can be found on Kaggle.\n\n\nSetup code\n# Libraries\npackages &lt;- c('tidyverse','MetBrewer','highcharter', 'gt', 'gtExtras')\ninstall.packages(setdiff(packages, rownames(installed.packages()))) \nlibrary(gt)\nlibrary(gtExtras)\nlibrary(tidyverse)\nlibrary(MetBrewer)\nlibrary(highcharter)\nrm(packages)\n\n\n# Importing data\ndrivers &lt;- read_csv(\"archive/drivers.csv\", show_col_types = F)\nresults &lt;- read_csv('archive/results.csv', show_col_types = F)\nflags &lt;- read_csv(\"flags_iso.csv\")\n\n# Data cleaning\n## setting mixed nationalities to first one\ndrivers$nationality &lt;- gsub('-Italian', '', drivers$nationality)\ndrivers$nationality &lt;- gsub('East German', 'German', drivers$nationality)\n## recoding NAs in number column\ndrivers$number &lt;- ifelse(drivers$number == '\\\\N', NA, drivers$number)\n\n# Defining wins and podiums vectors\nwins &lt;- \nresults |&gt; \n  filter(position == 1) |&gt; \n  count(driverId) |&gt; \n  rename(wins = n)\npodiums &lt;- \n  results |&gt; \n  filter(position == 1 | position == 2 | position == 3) |&gt; \n  count(driverId) |&gt; \n  rename(podiums = n)\n\n# Merging with driver data\ndrivers &lt;- full_join(drivers, wins)\ndrivers &lt;- full_join(drivers, podiums)\nrm(wins, podiums)\n\n# Creating full name column\ndrivers &lt;- drivers |&gt; \n  mutate(name = paste(forename, surname, sep = ' '))\n\n# Defining continent variable\nafrica &lt;- c('Algerian','Angolan','Beninese','Batswana','Burkinabe','Burundian','Cameroonian','Cape Verdean','Central African','Chadian','Comoran','Congolese (Democratic Republic of the Congo)','Congolese (Republic of the Congo)','Ivorian (Côte d’Ivoire)','Djiboutian','Egyptian','Equatorial Guinean','Eritrean','Ethiopian','Gabonese','Gambian','Ghanaian','Guinean','Guinea-Bissauan','Kenyan','Lesothoan','Liberian','Libyan','Malagasy','Malawian','Malian','Mauritanian','Mauritian','Moroccan','Mozambican','Namibian','Nigerien','Nigerian','Rwandan','Sahrawi','Saint Helenian','Sao Tomean','Senegalese','Seychellois','Sierra Leonean','Somali','South African','South Sudanese','Sudanese','Swazi','Tanzanian','Togolese','Tunisian','Ugandan','Zambian','Zimbabwean')\n\nasia &lt;- c('Afghan','Armenian','Azerbaijani','Bahraini','Bangladeshi','Bhutanese','Bruneian','Cambodian','Chinese','Cypriot','Filipino','Georgian','Indian','Indonesian','Iranian','Iraqi','Israeli','Japanese','Jordanian','Kazakhstani','Kuwaiti','Kyrgyzstani','Laotian','Lebanese','Malaysian','Maldivian','Mongolian','Myanmar (Burmese)','Nepalese','North Korean','Omani','Pakistani','Palestinian','Philippine','Qatari','Russian','Saudi Arabian','Singaporean','South Korean','Sri Lankan','Syrian','Taiwanese','Tajikistani','Thai','Timorese','Turkish','Turkmen','Emirati','Uzbekistani','Vietnamese','Yemeni')\n\neurope &lt;- c('Albanian','Andorran','Austrian','Belarusian','Belgian','Bosnian','Bulgarian',\n'Croatian','Cypriot','Czech','Danish','Estonian','Finnish','French','German', 'East German', 'Rhodesian', 'Greek','Hungarian','Icelandic','Irish','Italian','Kosovar','Latvian','Liechtensteiner','Lithuanian','Luxembourgish','Macedonian','Maltese','Moldovan','Monegasque','Montenegrin','Dutch','Norwegian','Polish','Portuguese','Romanian','Russian','Sammarinese','Serbian','Slovak','Slovenian','Spanish','Swedish','Swiss','Ukrainian','British','Vatican City State (Holy See)')\n\nnamerica &lt;- c('American','Antiguan and Barbudan','Bahamian','Barbadian','Belizean','Canadian','Costa Rican','Cuban','Dominican (Dominican Republic)','Dominican (Dominica)','Salvadoran','Grenadian','Guatemalan','Haitian','Honduran','Jamaican','Kittitian and Nevisian','Lucian','Mexican','Nicaraguan','Panamanian','Saint Vincent and the Grenadines','Trinidadian and Tobagonian')\n\nsamerica &lt;- c('Argentine','Bolivian','Brazilian','Chilean','Colombian','Ecuadorian','Guyanese','Paraguayan','Peruvian','Surinamese','Uruguayan','Venezuelan')\n\noceania &lt;- c('Australian','Fijian','Kiribati','Marshallese','Micronesian','Nauruan','New Zealander','Palauan','Papua New Guinean','Samoan','Solomon Islander','Tongan','Tuvaluan','Vanuatuan')\n\ndrivers$continent &lt;- ifelse(drivers$nationality %in% africa, 'African',\n                       ifelse(drivers$nationality %in% asia, 'Asian',\n                              ifelse(drivers$nationality %in% europe, 'European',\n                                     ifelse(drivers$nationality %in% namerica, 'North American',\n                                            ifelse(drivers$nationality %in% samerica, 'South American',\n                                                   ifelse(drivers$nationality %in% oceania, 'Oceanian', NA))))))\n\nrm(asia, africa, europe, namerica, samerica, oceania)\n\n\n# Creating graphics df\n## total drivers by nationality\nby_cont &lt;- drivers |&gt; \n  group_by(continent) |&gt; \n  summarise(drivers = n())\n## Nest continent &lt;- nationality &lt;- wins\nby_nat &lt;- drivers |&gt; \n  group_by(continent, nationality) |&gt; \n  summarise(drivers = n()) |&gt; \n  group_nest(continent) |&gt; \n  mutate(\n    id = continent,\n    type= 'pie',\n    data = purrr::map(data, mutate, name = nationality, y  = drivers, ),\n    data = purrr::map(data, list_parse)\n  )"
  },
  {
    "objectID": "posts/Formula 1/index.html#formula-1",
    "href": "posts/Formula 1/index.html#formula-1",
    "title": "Formula 1",
    "section": "",
    "text": "My whole family has been forever fascinated with car racing. This short exercise is therefore somewhat of a homage to the discipline.\nThe following charts were the excuse to try out the packages highcharter (for drilldown graphs) and gt (for tables). Both were heavily inspired by Tanya Shapiro’s work. The data used for this project can be found on Kaggle.\n\n\nSetup code\n# Libraries\npackages &lt;- c('tidyverse','MetBrewer','highcharter', 'gt', 'gtExtras')\ninstall.packages(setdiff(packages, rownames(installed.packages()))) \nlibrary(gt)\nlibrary(gtExtras)\nlibrary(tidyverse)\nlibrary(MetBrewer)\nlibrary(highcharter)\nrm(packages)\n\n\n# Importing data\ndrivers &lt;- read_csv(\"archive/drivers.csv\", show_col_types = F)\nresults &lt;- read_csv('archive/results.csv', show_col_types = F)\nflags &lt;- read_csv(\"flags_iso.csv\")\n\n# Data cleaning\n## setting mixed nationalities to first one\ndrivers$nationality &lt;- gsub('-Italian', '', drivers$nationality)\ndrivers$nationality &lt;- gsub('East German', 'German', drivers$nationality)\n## recoding NAs in number column\ndrivers$number &lt;- ifelse(drivers$number == '\\\\N', NA, drivers$number)\n\n# Defining wins and podiums vectors\nwins &lt;- \nresults |&gt; \n  filter(position == 1) |&gt; \n  count(driverId) |&gt; \n  rename(wins = n)\npodiums &lt;- \n  results |&gt; \n  filter(position == 1 | position == 2 | position == 3) |&gt; \n  count(driverId) |&gt; \n  rename(podiums = n)\n\n# Merging with driver data\ndrivers &lt;- full_join(drivers, wins)\ndrivers &lt;- full_join(drivers, podiums)\nrm(wins, podiums)\n\n# Creating full name column\ndrivers &lt;- drivers |&gt; \n  mutate(name = paste(forename, surname, sep = ' '))\n\n# Defining continent variable\nafrica &lt;- c('Algerian','Angolan','Beninese','Batswana','Burkinabe','Burundian','Cameroonian','Cape Verdean','Central African','Chadian','Comoran','Congolese (Democratic Republic of the Congo)','Congolese (Republic of the Congo)','Ivorian (Côte d’Ivoire)','Djiboutian','Egyptian','Equatorial Guinean','Eritrean','Ethiopian','Gabonese','Gambian','Ghanaian','Guinean','Guinea-Bissauan','Kenyan','Lesothoan','Liberian','Libyan','Malagasy','Malawian','Malian','Mauritanian','Mauritian','Moroccan','Mozambican','Namibian','Nigerien','Nigerian','Rwandan','Sahrawi','Saint Helenian','Sao Tomean','Senegalese','Seychellois','Sierra Leonean','Somali','South African','South Sudanese','Sudanese','Swazi','Tanzanian','Togolese','Tunisian','Ugandan','Zambian','Zimbabwean')\n\nasia &lt;- c('Afghan','Armenian','Azerbaijani','Bahraini','Bangladeshi','Bhutanese','Bruneian','Cambodian','Chinese','Cypriot','Filipino','Georgian','Indian','Indonesian','Iranian','Iraqi','Israeli','Japanese','Jordanian','Kazakhstani','Kuwaiti','Kyrgyzstani','Laotian','Lebanese','Malaysian','Maldivian','Mongolian','Myanmar (Burmese)','Nepalese','North Korean','Omani','Pakistani','Palestinian','Philippine','Qatari','Russian','Saudi Arabian','Singaporean','South Korean','Sri Lankan','Syrian','Taiwanese','Tajikistani','Thai','Timorese','Turkish','Turkmen','Emirati','Uzbekistani','Vietnamese','Yemeni')\n\neurope &lt;- c('Albanian','Andorran','Austrian','Belarusian','Belgian','Bosnian','Bulgarian',\n'Croatian','Cypriot','Czech','Danish','Estonian','Finnish','French','German', 'East German', 'Rhodesian', 'Greek','Hungarian','Icelandic','Irish','Italian','Kosovar','Latvian','Liechtensteiner','Lithuanian','Luxembourgish','Macedonian','Maltese','Moldovan','Monegasque','Montenegrin','Dutch','Norwegian','Polish','Portuguese','Romanian','Russian','Sammarinese','Serbian','Slovak','Slovenian','Spanish','Swedish','Swiss','Ukrainian','British','Vatican City State (Holy See)')\n\nnamerica &lt;- c('American','Antiguan and Barbudan','Bahamian','Barbadian','Belizean','Canadian','Costa Rican','Cuban','Dominican (Dominican Republic)','Dominican (Dominica)','Salvadoran','Grenadian','Guatemalan','Haitian','Honduran','Jamaican','Kittitian and Nevisian','Lucian','Mexican','Nicaraguan','Panamanian','Saint Vincent and the Grenadines','Trinidadian and Tobagonian')\n\nsamerica &lt;- c('Argentine','Bolivian','Brazilian','Chilean','Colombian','Ecuadorian','Guyanese','Paraguayan','Peruvian','Surinamese','Uruguayan','Venezuelan')\n\noceania &lt;- c('Australian','Fijian','Kiribati','Marshallese','Micronesian','Nauruan','New Zealander','Palauan','Papua New Guinean','Samoan','Solomon Islander','Tongan','Tuvaluan','Vanuatuan')\n\ndrivers$continent &lt;- ifelse(drivers$nationality %in% africa, 'African',\n                       ifelse(drivers$nationality %in% asia, 'Asian',\n                              ifelse(drivers$nationality %in% europe, 'European',\n                                     ifelse(drivers$nationality %in% namerica, 'North American',\n                                            ifelse(drivers$nationality %in% samerica, 'South American',\n                                                   ifelse(drivers$nationality %in% oceania, 'Oceanian', NA))))))\n\nrm(asia, africa, europe, namerica, samerica, oceania)\n\n\n# Creating graphics df\n## total drivers by nationality\nby_cont &lt;- drivers |&gt; \n  group_by(continent) |&gt; \n  summarise(drivers = n())\n## Nest continent &lt;- nationality &lt;- wins\nby_nat &lt;- drivers |&gt; \n  group_by(continent, nationality) |&gt; \n  summarise(drivers = n()) |&gt; \n  group_nest(continent) |&gt; \n  mutate(\n    id = continent,\n    type= 'pie',\n    data = purrr::map(data, mutate, name = nationality, y  = drivers, ),\n    data = purrr::map(data, list_parse)\n  )"
  },
  {
    "objectID": "posts/Formula 1/index.html#driver-nationality",
    "href": "posts/Formula 1/index.html#driver-nationality",
    "title": "Formula 1",
    "section": "Driver nationality",
    "text": "Driver nationality\nF1 drivers come from all over the world: all continents are or have been represented in the driver’s championship. However, not every one of them is equally represented. The interactive graph below displays the distribution of the drivers’ home countries.\n\n\nDrilldown chart code\n# Making basic pie chart\ndonut_chart &lt;- by_cont |&gt;\n  hchart('pie',\n         hcaes(x = continent, y = drivers, drilldown = continent),\n         name = 'Drivers'\n         ) |&gt; \n  hc_plotOptions(pie = list(innerSize = '70%')) |&gt; \n  hc_title(text = 'Number of F1 drivers by geographical ')\n\n# Making drilldown active\ndrilldown_chart &lt;- donut_chart |&gt; \n  hc_drilldown(\n    #map to data\n    series = list_parse(by_nat),\n    allowPointDrilldown = TRUE,\n    #set stylings of data labels that offer drill down views\n    activeDataLabelStyle = list(\n      textDecoration=\"none\",\n      color=\"black\"\n    )\n  )\n\ncustom_theme &lt;- hc_theme(\n  colors = met.brewer('Degas'),\n  chart = list(\n    backgroundColor = NULL\n  ),\n  title = list(\n    style = list(\n      color = \"#333333\",\n      fontFamily = \"Archivo\",\n      fontWeight=\"bold\"\n    )\n  ),\n  xAxis = list(\n    labels=list(style = list(\n      color = \"#666666\",\n      fontFamily = \"Archivo\"\n    ))\n  ),\n  yAxis = list(\n    labels=list(style = list(\n      color = \"#666666\",\n      fontFamily = \"Archivo\"\n    ))\n  ),\n  tooltip = list(\n    style = list(\n      fontFamily = \"Archivo\"\n    )\n  ),\n  plotOptions = list(\n    series = list(\n      dataLabels = list(style=list(fontFamily = \"Archivo\")\n      ))\n  )\n)\ndrilldown_chart |&gt; \n  hc_add_theme(custom_theme)"
  },
  {
    "objectID": "posts/Formula 1/index.html#driver-stats",
    "href": "posts/Formula 1/index.html#driver-stats",
    "title": "Formula 1",
    "section": "Driver stats",
    "text": "Driver stats\n\n\nCode prep\n# Building df\nwintable &lt;-  drivers |&gt;\n  select(name, nationality, wins, podiums) |&gt; \n  filter(!is.na(wins)) |&gt;\n  arrange(desc(wins)) |&gt;\n  slice(1:20)\npodtable &lt;-  drivers |&gt;\n  select(name, nationality, podiums, wins) |&gt; \n  filter(!is.na(podiums)) |&gt;\n  arrange(desc(podiums)) |&gt;\n  slice(1:20)\n\nwintable$nationality &lt;- c('GB', 'DE', 'NL', 'DE', 'FR', 'BR', 'ES', 'GB', 'GB', 'AT', 'GB', 'AR', 'DE', 'BR', 'GB', 'FI', 'FI', 'GB', 'GB', 'BR')\npodtable$nationality &lt;- c('GB', 'DE', 'DE', 'NL', 'ES', 'FR', 'FI', 'BR', 'BR', 'FI', 'GB', 'BR', 'GB', 'DE', 'AT', 'FI', 'GB', 'AT', 'AR', 'GB')\n\ntottable &lt;- full_join(wintable, podtable)\n# Country flag images\nflags &lt;- flags |&gt; \n  select(URL, `Alpha-2 code`)\n## merge\nwintable &lt;- left_join(wintable, flags, by = join_by('nationality' == `Alpha-2 code`)) |&gt; \n  select(name, URL, wins) |&gt; \n  rename(nationality = URL)\npodtable &lt;- left_join(podtable, flags, by = join_by('nationality' == `Alpha-2 code`)) |&gt; \n  select(name, URL, podiums) |&gt; \n  rename(Name = name,\n         Nationality = URL,\n         Podiums = podiums)\ntottable &lt;- left_join(tottable, flags, by = join_by('nationality' == `Alpha-2 code`)) |&gt;\n  select(name, URL, wins, podiums) |&gt; \n  rename(Name = name,\n         Nationality = URL,\n         Podiums = podiums,\n         Wins = wins)\n\ndtable &lt;- bind_cols(wintable, podtable)\nrm(wintable, podtable)\n\n\nThe rankings of the most podiums and the most wins do not necessarily coincide. Below are two tables with these two rankings. Below is a web-friendly, responsive table with the corresponding data. In the source code, a print-ready static table is also available.\n\n\nTable design\n# # Static table\n# dtable |&gt; \n#   gt() |&gt; \n#   tab_header(\n#     title = md(\"## Top ten F1 drivers\")\n#   ) |&gt; \n#   gt_img_rows(columns = Nationality, height = 15) |&gt; \n#   gt_img_rows(columns = nationality, height = 15) |&gt; \n#   cols_align(\n#     align = \"center\",\n#     columns = 2:3) |&gt; \n#   cols_align(\n#     align = 'center',\n#     columns = 4:5\n#   ) |&gt; \n#   tab_spanner(label = 'Most wins',\n#               columns = 2:3) |&gt; \n#   tab_spanner(label = 'Most podiums',\n#               columns = 5:6) |&gt;\n#   gt_theme_538()\n\n# Responsive table\ntottable |&gt; \n  gt(rowname_col = 'Name') |&gt; \n  tab_header(title = html('&lt;h2&gt;Top F1 drivers&lt;/h2&gt;'),\n             ) |&gt; \n  fmt_image(Nationality, height = 15) |&gt; \n  cols_align(align = 'center', columns = 2:4) |&gt; \n  opt_interactive(use_pagination = T,\n                  use_sorting = T) |&gt; \n  tab_options(table.background.color = 'white',\n              table.font.style = 'Roboto',\n              table.border.top.color = 'white',\n              heading.align = 'center',\n              row.striping.include_table_body =FALSE,\n              heading.border.bottom.color = \"white\",\n              row_group.border.bottom.color = \"white\",\n              row_group.border.top.color = \"white\"\n              )\n\n\n\n\n\nTop F1 drivers"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html",
    "href": "posts/RxR Quest_23/Index.html",
    "title": "RxR Questionnaire - 2023",
    "section": "",
    "text": "In 2023, a team of researchers realised a social survey for the Umbrian association una Regione per Restare - RxR. The research focused mainly on two questions:\nAs this was the first research project promoted by the association, the sample is patchy and excessively small. Since the survey was administered through snow-balling, there is also an evident self-selection problem (too many students, too many individuals aged 20-25 due to the survey being distributed mainly through universities). These problems have been discussed at length internally and will all be taken into account in future projects. In the meantime, the data was used to conduct a merely descriptive analysis, in order to obtain at list a few hints on the next steps to be taken. A good portion of this exact work was carried out in order to explain the issues with the data collection process itself to a non-technical audience.\nAbout a year after the beginning of the survey’s distribution, I was involved as a data analyst, and contributed to the writing of the final report. Below is a selection of my contributions, both in terms of internal and external communication.\nSince the whole work was written in Italian, the graphs and charts are not translated. The source code and data is available at the link on the top right, which leads to Lucia Temperini and I’s GitHub repository. Although code boxes were included in the post for reference, the final graphics were post-produced in Pixelmator. A selection of these are included in the gallery right below, before the actual post."
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#coverage",
    "href": "posts/RxR Quest_23/Index.html#coverage",
    "title": "RxR Questionnaire - 2023",
    "section": "Coverage",
    "text": "Coverage\n\n\nShow code\n## Domicilio - cleaning\nAbitare$dom &lt;- as.character(Abitare$dom)\nAbitare$dom &lt;- ifelse(Abitare$dom == 'Stesso della residenza', Abitare$res, Abitare$dom)\n\n## Province\nprov &lt;- geoCod |&gt; \n  select(`Denominazione (Italiana e straniera)`, `Unità territoriale sovracomunale`) |&gt; \n  rename(denom = `Denominazione (Italiana e straniera)`,\n         prov = `Unità territoriale sovracomunale`)\n\nAbitare &lt;- left_join(Abitare, prov, by = join_by(dom == denom))\nAbitare &lt;- Abitare |&gt; \n  relocate(prov, .after = dom) |&gt; \n  rename(prov_dom = prov)\n\n## Select and merge quest data\ndf &lt;- left_join(Lavorare |&gt; \n                  select(id, occ, gen),\n                Abitare |&gt; \n                  select(id, dom, eta))\n### factor età\ndf$eta &lt;- as.numeric(df$eta)\ndf &lt;- df |&gt; \n  mutate(class_eta = case_match(eta,\n                    c(15:19) ~ '15-20',\n                    c(20:24) ~ '20-25',\n                    c(25:29) ~ '25-30',\n                    c(30:34) ~ '30-35',\n                    c(35:39) ~ '35-40',\n                    c(40:45) ~ '40-45'\n  ))\n\n### occ cleaning\ndf &lt;- df |&gt; \n  mutate(occ = gsub((' (inclusi contratti a nero, precari,  di ricerca, stage, servizio civile)'), '', occ, fixed = T),\n         occ = gsub((' (inclusi contratti a nero, precari, di ricerca, stage, servizio civile)'), '', occ, fixed = T))\n\n## dom frequency table\ndomdf &lt;- df |&gt; \n  group_by(dom) |&gt; \n  count()\n### geospatial data merge\ndomdf &lt;- left_join(domdf,\n                sf |&gt;\n                  select(COMUNE, geometry),\n                by = join_by(dom == COMUNE))\n\n\nThe main problem with the questionnaire was its coverage. In discussing the problem with the rest of our organisation, mapping it out was the best way to explain our dissatisfaction with the results. The tooltip reveals the number of responses in each municipality. The extremely low numbers would be a problem in and of themselves, but the extreme concentration in the city of Perugia (where the University is located) renders the sample impossible to use for statistical inference.\nThe gray areas are municipalities (comuni) that we could not reach at all.\n\n\nShow code\n# Dataviz ----------------------------------------------------------------------\n## Mappa copertura geo\n\nggdom &lt;- domdf |&gt; \n  ggplot() +\n  geom_sf(data = umbriasf, aes(geometry = geometry), colour = 'black', fill = 'gray98') +\n  geom_sf_interactive(aes(geometry = geometry, fill = n, data_id = dom, tooltip = n)) +\n  geom_sf_text(data = ~. |&gt; filter(dom != 'Perugia'),\n               aes(geometry = geometry, label = dom), colour = 'black', size = 3) +\n  geom_sf_text(data = ~. |&gt; filter(dom == 'Perugia'),\n               aes(geometry = geometry, label = dom), colour = 'white', size = 3) +\n  scale_fill_viridis_c(option = 'inferno', direction = -1) +\n  labs(title = 'Questionnaire\\'s geographic coverage') +\n  theme_void() +\n  theme(legend.position = 'none',\n        plot.title = element_text(family = 'Helvetica', hjust = .5, size = 20))\n\n\n### Interactive\n\ngirafe(ggobj = ggdom,\n       width_svg = 8,\n       height_svg = 9,\n       options = list(\n         opts_hover(css = ''),\n         opts_hover_inv(css = 'opacity:0.3;'),\n         opts_tooltip(css = \"background-color:white;\n                      color:black;\n                      font-family:Helvetica;\n                      font-style:empty;\n                      padding:8px;\n                      border-radius:10px;\",\n                      use_cursor_pos = T),\n         opts_toolbar(position = 'bottomright')))\n\n\n\n\n\n\nThe extremely unequal socio-demographical composition of the sample did not reassure us in any way. The choice of snow-balling as a distribution method introduced significant self-selection problems, which lead to the situation shown in the figure\n\n\nShow code\n### Genere/età/occ\ndf |&gt; \n  mutate(gen = case_match(gen,\n                          'Donna' ~ 'Female',\n                          'Uomo' ~ 'Male',\n                          'Non Binario' ~ 'Non-binary'\n                          )) |&gt; \n  ggplot(aes(x = class_eta, fill = occ)) +\n  geom_bar() +\n  scale_fill_met_d('Degas', direction = -1) +\n  facet_wrap(vars(gen)) +\n  theme_minimal() +\n  theme(legend.title = element_blank(),\n        legend.position = 'bottom',\n        axis.title = element_blank(),\n        strip.text = element_text(size = 15),\n        plot.title = element_text(hjust = .5, size = 18))"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#abitare",
    "href": "posts/RxR Quest_23/Index.html#abitare",
    "title": "RxR Questionnaire - 2023",
    "section": "Abitare",
    "text": "Abitare"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#restare",
    "href": "posts/RxR Quest_23/Index.html#restare",
    "title": "RxR Questionnaire - 2023",
    "section": "Restare",
    "text": "Restare"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#should-i-stay-or-should-i-go",
    "href": "posts/RxR Quest_23/Index.html#should-i-stay-or-should-i-go",
    "title": "RxR Questionnaire - 2023",
    "section": "Should I stay or should I go?",
    "text": "Should I stay or should I go?\nThe following section tries to answer the main question directly: what brings people to leave their home? Why do some still decide to stay?\n\nRelationship to Umbria\nThe first step of the analysis was purely descriptive: how big is the fraction of our sample which left, or would like to? An infographic-style waffle chart was the best choice to convey meaning keeping sense of scale.\n\n\nShow code\n## Rapporto con la regione -----------------------------------------------------\n\nRestare |&gt; \n  group_by(rapp) |&gt; \n  count() |&gt; \n  mutate(rapp = case_match(rapp,\n                           'Vorrei restare nel posto in cui vivo' ~\n                             'I\\'d like to stay where I am',\n                           'Sarei contento di vivere e lavorare altrove' ~\n                             'I\\'d like to live and work somewhere else',\n                           'Vorrei restare ma non posso' ~\n                             'I\\'d like to stay, but I can\\'t',\n                           'Vorrei partire ma non posso' ~\n                             'I\\'d like to leave, but I can\\'t'),\n         rapp = factor(rapp, levels = c(\n           'I\\'d like to stay where I am',\n           'I\\'d like to stay, but I can\\'t',\n           'I\\'d like to leave, but I can\\'t',\n           'I\\'d like to live and work somewhere else'\n         ))) |&gt; \n  waffle(size = 1,\n         flip = T,\n         reverse = T,\n         legend_pos = 'right')"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#living-conditions",
    "href": "posts/RxR Quest_23/Index.html#living-conditions",
    "title": "RxR Questionnaire - 2023",
    "section": "Living conditions",
    "text": "Living conditions\nBuilding on the questionnaire’s questions, an index of satisfaction with one’s living conditions was built. All values are expressed in percentage.\n\n\nShow code\n## Data cleaning/wrangling -----------------------------------------------------\n### Domicilio - cleaning\nAbitare$dom &lt;- as.character(Abitare$dom)\nAbitare$dom &lt;- ifelse(Abitare$dom == 'Stesso della residenza', Abitare$res, Abitare$dom)\n\n## Index recode\nabRecode &lt;- function(x) {case_match(paste(x),\n        'Per nulla' ~ 1,\n        'Poco' ~ 2,\n        'Abbastanza' ~ 3,\n        'Molto' ~ 4\n      )}\n\nAbitare &lt;- Abitare |&gt; \n    mutate(across(c(abQual, abCost, abPriv, abVic, abColl),\n                  abRecode\n                  )\n           )\nrm(abRecode)\n\n### Additive index def\nAbitare &lt;- Abitare |&gt; \n  mutate(abInd = rowSums(across(c(abQual, abCost, abPriv, abVic, abColl)))) |&gt; \n  mutate(abInd = (abInd-5)/15 * 100) |&gt; \n  mutate(abInd = round(abInd, 2)) |&gt; \n  relocate(abInd, .after = abColl)\n\n\n\n\nShow code\n# Dataviz ----------------------------------------------------------------------\n## Index by urban zone\nabPlotZon &lt;- Abitare |&gt; \n  filter(prov_dom == 'Terni' | prov_dom == 'Perugia') |&gt; \n  group_by(zon) |&gt;\n  summarise(meanzon = mean(abInd)) |&gt; \n  mutate(zon = case_match(zon,\n                          'Periferia' ~ 'Suburbs',\n                          'Centro Cittadino' ~ 'City centre',\n                          'Area Rurale' ~ 'Rural area')) |&gt; \n  mutate(ovmean = mean(meanzon),\n         flag = ifelse(meanzon &gt; ovmean, T, F),\n         zon = factor(zon,\n                           levels = zon[order(meanzon)]))\n\nggPlotZon &lt;- abPlotZon |&gt; \n  ggplot(aes(x = zon, y = meanzon, colour = flag, data_id = zon, tooltip = round(meanzon, 2))) +\n  geom_point_interactive(size = 6) +\n  geom_segment_interactive(aes(y = ovmean, yend = meanzon, x = zon, xend = zon)) +\n  geom_point(size = 4, colour = 'white') +\n  scale_y_continuous(n.breaks = 4) +\n  geom_hline(yintercept = abPlotZon$ovmean[1], colour = 'gray70', size = 0.3) +\n  scale_color_met_d('Degas') +\n  coord_flip() +\n  labs(title = 'Living condition satisfaction index',\n       subtitle = 'Decomposition by area') + \n  theme_minimal() +\n  theme(axis.title = element_blank(),\n        legend.position = 'none',\n        plot.title = element_text(hjust = .5, size = 20),\n        plot.subtitle = element_text(hjust = .5, size = 15),\n        axis.text.y = element_text(size = 11))\n\n\n### Interactive graph\ngirafe(ggobj = ggPlotZon,\n       width_svg = 8,\n       options = list(\n         opts_hover(css = ''), ## CSS code of line we're hovering over\n         opts_hover_inv(css = \"opacity:0.3;\"), ## CSS code of all other lines\n         opts_tooltip(css = \"background-color:white;\n                      color:black;\n                      font-family:Helvetica;\n                      font-style:empty;\n                      padding:8px;\n                      border-radius:10px;\",\n                      use_cursor_pos = T),\n         opts_toolbar(position = 'bottomright')))"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#reasons-for-staying",
    "href": "posts/RxR Quest_23/Index.html#reasons-for-staying",
    "title": "RxR Questionnaire - 2023",
    "section": "Reasons for staying",
    "text": "Reasons for staying\nThis last section aimed at finding the exact reasons why people either stay or go. Radar plots were the best way to convey the relative importance of each individual reason.\n\nShow code\n## Motivi per restare ----------------------------------------------------------\n\n### graphics df\n#### counting each column\nrest &lt;- tibble(.rows = 4, choice = c('Per nulla',\n                                     'Poco',\n                                     'Abbastanza',\n                                     'Molto'))\nfor (i in 1:10) {\nvec &lt;- Restare[startsWith(names(Restare),\"rest\")] |&gt; \n    group_by(Restare[startsWith(names(Restare),\"rest\")][i]) |&gt;\n    drop_na() |&gt; \n    count(name = paste(names(Restare[startsWith(names(Restare),\"rest\")][i]), '_n')) |&gt; \n    rename('choice' = names(Restare[startsWith(names(Restare),\"rest\")][i]))\n\nrest &lt;- full_join(rest, vec |&gt; mutate(choice = choice))\n\n}\nrm(i)\n#### data wrangling\nrest2 &lt;- data.frame(t(rest[-1])) # swapping columns-rows\ncolnames(rest2) &lt;- rest$choice\n\nrest &lt;- rownames_to_column(rest2) |&gt;\n  mutate(rowname = gsub('_n', '', rowname)) |&gt; # column \n  rename(choice = rowname)\n\nrm(rest2)\n\nrest &lt;- rest |&gt; \n  mutate(index = round(((Abbastanza + Molto)/89)*100, 2)) # % di abbastanza + molto importante\n\n### graphics\nlabels&lt;-data.frame(\n  y = c(25,50,75,100),\n  x = rep(0.25,4)\n)\nrest |&gt; \n  filter(choice != 'restFort ') |&gt; \n  mutate(choice = case_match(choice,\n                             'restLeg ' ~ 'Legame/impegno per la comunità',\n                             'restSoc ' ~ 'Contatti sociali e umani più gratificanti',\n                             'restNat ' ~ 'Contatto con la natura',\n                             'restQual '    ~ 'Qualità e stile di vita',\n                             'restOpp ' ~ 'Opportunità anche nel restare',\n                             'restImp ' ~ 'Idea imprenditoriale',\n                             'restFam ' ~ 'Esigenze personali/familiari',\n                             'restCost '    ~ 'Costo della vita più basso',\n                             'restAmb ' ~ 'Scarsa importanza alla carriera'\n                             )) |&gt; \n  ggplot(aes(x = choice, y = index, fill = choice)) +\n  geom_col() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 85)) +\n  labs(title = 'Motivi per restare') +\n  scale_fill_manual(values = met.brewer('Tiepolo', 9)) +\n  theme_void() +\n  theme(axis.title = element_blank(),\n        legend.position = 'right',\n        legend.title = element_blank(),\n        plot.title = element_text(size = 20, hjust = .5))\n## Motivi per lasciare ---------------------------------------------------------\n\n### graphics df\n#### counting each column\nlasc &lt;- tibble(.rows = 4, choice = c('Abbastanza', 'Molto', 'Per nulla', 'Poco'))\nfor (i in 1:10) {\n  vec &lt;- Restare[startsWith(names(Restare),\"lasc\")] |&gt; \n    group_by(Restare[startsWith(names(Restare),\"lasc\")][i]) |&gt;\n    drop_na() |&gt; \n    count(name = paste(names(Restare[startsWith(names(Restare),\"lasc\")][i]), '_n')) |&gt; \n    rename('choice' = names(Restare[startsWith(names(Restare),\"lasc\")][i]))\n  \n  lasc &lt;- full_join(lasc, vec)\n  \n}\nrm(i)\n#### data wrangling\nlasc2 &lt;- data.frame(t(lasc[-1])) # swapping columns-rows\ncolnames(lasc2) &lt;-  lasc$choice\n\nlasc &lt;- rownames_to_column(lasc2) |&gt;\n  mutate(rowname = gsub('_n', '', rowname)) |&gt; # column \n  rename(choice = rowname)\n\nrm(lasc2)\n\nlasc &lt;- lasc |&gt; \n  mutate(index = round(((Abbastanza + Molto)/166)*100, 2)) # % di abbastanza + molto importante\n\n### graphics\nlabels&lt;-data.frame(\n  y = c(25,50,75,100),\n  x = rep(0.25,4)\n)\nlasc |&gt; \n  mutate(choice = case_match(choice,\n                             'lascEsp ' ~ 'Ampliare i propri orizzonti',\n                             'lascOpp ' ~ 'Formazione/offerte di lavoro',\n                             'lascImp ' ~ 'Idea imprenditoriale',\n                             'lascEst ' ~ 'Bellezza estetica delle città',\n                             'lascSoc ' ~ 'Relazioni sociali',\n                             'lascFam ' ~ 'Realizzazione familiare',\n                             'lascServ '    ~ 'Offerta di servizi',\n                             'lascRit ' ~ 'Realizzarsi per poi tornare',\n                             'lascTent '    ~ 'Tentare a realizzarsi',\n                             'lascCult '    ~ 'Vita culturale più intensa'\n  )) |&gt; \n  ggplot(aes(x = choice, y = index, fill = choice)) +\n  geom_col() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 95)) +\n  labs(title = 'Motivi per andare') +\n  scale_fill_manual(values = met.brewer('Tiepolo', 10)) +\n  theme_void() +\n  theme(axis.title = element_blank(),\n        legend.position = 'right',\n        legend.title = element_blank(),\n        plot.title = element_text(size = 20, hjust = .5))"
  },
  {
    "objectID": "posts/RxR Quest_23/Index.html#gallery",
    "href": "posts/RxR Quest_23/Index.html#gallery",
    "title": "RxR Questionnaire - 2023",
    "section": "Gallery",
    "text": "Gallery"
  }
]